setwd("~/Google Drive/Berkeley PhD/Packages/partitions")
devtools::load_all()
devtools::document()
?kdTree
kdTree(iris[,-5], max.depth = 5)
devtools::use_testthat()
kdTree(iris[,-5])
devtools::load_all()
kdTree(iris[,-5])
devtools::load_all()
kdTree(iris[,-5])
devtools::load_all()
kdTree(iris[,-5])
devtools::load_all()
kdTree(iris[,-5])
devtools::load_all()
kdTree(iris[,-5])
devtools::load_all()
kdTree(iris[,-5])
devtools::load_all()
kdTree(iris[,-5])
devtools::document()
kdTree(iris[,-5])
devtools::load_all()
kdTree(iris[,-5])
library(magrittr)
kdTree(iris[,-5])
kdTree(iris[,-5])
length(a)
kdtree <- kdTree(iris[,-5], max.depth = 5)
length(kdtree)
nrow(kdtree)
2^max.depth - 1
max.depth = 5
2^max.depth - 1
library(stringr)
str(kdtree)
head(kdtree[,1:5])
expect_equal(sum(kdtree$depth == 2), 2^1)
sum(kdtree$depth == 2)
sum(kdtree$depth == 3)
sum(kdtree$depth == 4)
max(kdtree$axis)
library(testthat)
library(partitions)
test_check("partitions")
test_check("partitions")
library(testthat)
library(partitions)
test_check("partitions")
devtools::load_all()
test_check("partitions")
devtools::load_all()
test_check("partitions")
devtools::test()
kdtree
head(kdtree$[,1:10])
head(kdtree[,1:10])
left.child <- filter(kdtree, depth == 2, axis == 2)
dplyr::filter(kdtree, depth == 2, axis == 2)
4:153
length(4:153)
expect_identical(sapply(children, sum)[4:153], rep(1, 150))
children <- dplyr::filter(kdtree, depth == 2, axis == 2)
expect_identical(sapply(children, sum)[4:153], rep(1, 150))
sapply(children, sum)[4:153]
rep(1, 150)
expect_equivalent(sapply(children, sum)[4:153], rep(1, 150))
children <- dplyr::filter(kdtree, depth == 2, axis == 2)
expected.vector <- rep(1, 150)
names(expected.vector) <- paste0("d", rep(1, 150))
expect_identical(sapply(children, sum)[4:153], expected.vector)
sapply(children, sum)[4:153]
expected.vector
children <- dplyr::filter(kdtree, depth == 2, axis == 2)
expected.vector <- rep(1, 150)
names(expected.vector) <- paste0("d", 1:150)
expect_identical(sapply(children, sum)[4:153], expected.vector)
terminal.nodes <- dplyr::filter(kdtree, depth == 5)
terminal.nodes
terminal.nodes <- dplyr::filter(kdtree, depth == 5)
expected.vector <- rep(1, 150)
names(expected.vector) <- paste0("d", 1:150)
expect_identical(terminal.nodes, expected.vector)
expect_identical(sapply(terminal.nodes, sum), expected.vector)
expect_identical(sapply(terminal.nodes, sum)[4:153], expected.vector)
library(testthat)
context("Tree splits")
kdtree <- kdTree(iris[,-5], max.depth = 5)
test_that("kdtree is the correct dimension", {
expect_equal(nrow(kdtree), 2^max.depth - 1)
})
test_that("each depth is repeated the correct number of times", {
expect_equal(sum(kdtree$depth == 2), 2^1)
expect_equal(sum(kdtree$depth == 3), 2^2)
expect_equal(sum(kdtree$depth == 4), 2^3)
})
test_that("the largest axis is equal to the number of variables", {
expect_equal(max(kdtree$axis), ncol(iris[,-5]))
})
test_that("each node completely splits the data", {
children <- dplyr::filter(kdtree, depth == 2, axis == 2)
expected.vector <- rep(1, 150)
names(expected.vector) <- paste0("d", 1:150)
expect_identical(sapply(children, sum)[4:153], expected.vector)
})
test_that("every data point falls in EXACTLY ONE terminal node", {
terminal.nodes <- dplyr::filter(kdtree, depth == 5)
expected.vector <- rep(1, 150)
names(expected.vector) <- paste0("d", 1:150)
expect_identical(sapply(terminal.nodes, sum)[4:153], expected.vector)
})
kdtree %>% filter(depth == 1)
kdtree %>% filter(depth == 2)
kdtree
kdtree <- kdTree(iris[,-5], max.depth = 5)
kdtree %>% filter(depth == 2)
library(dplyr)
kdtree %>% filter(depth == 2)
kdtree %>% filter(depth == 1) %>% select(depth, axis, cutpoint)
iris[,1] < 5.8
colnames(a) <- 1:150
a <- iris[,1] < 5.8
colnames(a) <- 1:150
a
names(a) <- 1:150
a
b <- kdtree %>% filter(depth == 1) %>% select(depth, axis, cutpoint)
b
b <- kdtree %>% filter(depth == 2)
data.frame(a, b)
a
b
t(rbind(a, b[4:153]))
t(rbind(true.left = a, b[4:153]))
devtools::load_all()
kdtree <- kdTree(iris[,-5], max.depth = 5)
kdtree %>% filter(depth == 1) %>% select(depth, axis, cutpoint)
b <- kdtree %>% filter(depth == 2)
a <- iris[,1] < 5.8
names(a) <- 1:150
t(rbind(true.left = a, b[4:153]))
test()
devtools::test()
kdtree
children <- dplyr::filter(kdtree, depth == 3, axis == 3)
children
expected.vector <- rep(1, 150)
names(expected.vector) <- paste0("d", 1:150)
expect_identical(sapply(children, sum)[4:153], expected.vector)
sapply(children, sum)[4:153]
runif(1, 0, 180)
View(terminal.nodes)
devtools::load_all()
