{
    "collab_server" : "",
    "contents" : "\n#' Build a random-partition tree.\n#'\n#' @param X A data frame whose columns correspond to the variables and whose\n#'          rows correspond to the data points.\n#' @param max.depth A number specifying the total depth of the tree.\n#' @return A data frame describing the nodes of the tree and which data points\n#'          are included in the node.\n#' @importFrom magrittr \"%>%\"\n#' @examples\n#' rpTree(iris[,-5], max.depth = 5)\n\nrpTree <- function(X, max.depth = 5) {\n\n  # initialize objects\n  depth <- 0\n  node <- list(left.child = NULL,\n               right.child = NULL)\n  # add an id column to keep track of which data points go where\n  X$id <- 1:nrow(X)\n\n  # results table\n  N <- nrow(X)\n  # initialize the results table\n  results <- data.frame(depth = depth, axis = NA, cutpoint = NA, t(rep(TRUE, N)))\n  # axis can be the angle from 0 to 360 relative to 0\n  colnames(results) <- c(\"depth\", \"axis\", \"cutpoint\", paste0(\"d\", 1:nrow(X)))\n\n  # run the recursive function to define the list of results tables\n  nested.list.results <- rpSplit(X, N, node, depth, max.depth)\n\n  clean.results <- nestedListToDataFrame(nested.list.results,\n                                         entry.length = N + 3)\n\n  return(clean.results)\n}\n\n\n\n\n#' A recursive nodesplitting function called in rpTree()\n#'\n#' @importFrom magrittr \"%>%\"\n\nrpSplit <- function(X, N, node, depth, max.depth) {\n  if (depth < max.depth) {\n\n    # go one layer deeper\n    depth <- depth + 1\n\n    # set the axis angle\n    axis <- runif(1, 0, 180)\n\n    # identify the median along the specified axis from the parent node\n    cutpoint <- median(X[, axis])\n\n    ### TODO : define the hyperplant that goes through the median cutpoint (with jitter) and has angle 'axis'\n\n    ### TODO : idenitfy which points fall on one side of the random hyperplane\n    # left.of.cutpoint <- ?\n\n    # tmp keeps track of which data points are present in this node\n    # it is a vector of TRUE/FALSE\n    tmp <- t(data.frame(1:N %in% X$id))\n    rownames(tmp) <- NULL\n    colnames(tmp) <- paste0(\"d\", 1:N)\n    # fill in the results table for this node\n    node$results <- data.frame(depth = depth,\n                               axis = axis,\n                               cutpoint = cutpoint,\n                               tmp)\n\n    # recursively call the function\n    node$left.child <- rpSplit(X[left.of.cutpoint, ], N,\n                               node, depth, max.depth)\n    node$right.child <- rpSplit(X[!left.of.cutpoint, ], N,\n                                node, depth, max.depth)\n\n    return(node)\n  }\n}\n\n",
    "created" : 1476827379112.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3514899763",
    "id" : "4602EF10",
    "lastKnownWriteTime" : 1476828074,
    "last_content_update" : 1476828074215,
    "path" : "~/Google Drive/Berkeley PhD/Packages/partitions/R/rp-tree.R",
    "project_path" : "R/rp-tree.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}